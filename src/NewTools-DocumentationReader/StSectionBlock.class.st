"
I represent sections in a hierarchical microdown document. 
Sections are not generated by the microdown parser, but by a following normalization done by the `StHeaderNormalizationVisitor` (see class comment of the visitor)
"
Class {
	#name : #StSectionBlock,
	#superclass : #MicAbstractBlock,
	#instVars : [
		'header',
		'level'
	],
	#category : #'NewTools-DocumentationReader'
}

{ #category : #visiting }
StSectionBlock >> accept: aVisitor [
	level > 0 ifTrue: [ header accept: aVisitor].
	aVisitor visitAll: children 
]

{ #category : #'dummy methods' }
StSectionBlock >> addLineAndReturnNextNode: line [
	self error: 'Should not happen - I can not be created during parsing'.
	
]

{ #category : #'dummy methods' }
StSectionBlock >> canConsumeLine: line [
	self error: 'Should not happen - I can not be created during parsing'.
]

{ #category : #accessing }
StSectionBlock >> header [

	^ header
]

{ #category : #accessing }
StSectionBlock >> header: anObject [

	header := anObject
]

{ #category : #accessing }
StSectionBlock >> level [

	^ level
]

{ #category : #accessing }
StSectionBlock >> level: anObject [

	level := anObject
]

{ #category : #printing }
StSectionBlock >> printOn: aStream [
	level = 0
		ifTrue: [ aStream << 'ROOT NODE' ]
		ifFalse: [ aStream << header header ]
	
]

{ #category : #'as yet unclassified' }
StSectionBlock >> subSections [
	"return those children that are sub sections"
	^ self children select: [ :block |block class = self class ]
]
